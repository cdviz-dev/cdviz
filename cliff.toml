# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.
# see https://github.com/orhun/git-cliff/blob/main/examples/keepachangelog.toml

[changelog]
# changelog header
header = """
<!-- markdownlint-disable MD024-->
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [Unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | split(pat="\\n") | first | upper_first }} ([{{ commit.id | truncate(length=7, end="") }}]({{ commit.id }}))\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# postprocessors
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]
[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"}, # replace issue numbers
]
# regex for parsing and grouping commits
# try to follow [Keep a Changelog](https://keepachangelog.com/en/1.1.0/)
commit_parsers = [
  { message = "^(feat|✨|💥)", group = "Added", bump = "minor" },
  { message = "^(fix|🐛|🚑️|👽️)", group = "Fixed", bump = "patch" },
  { message = "^(doc|✏️|📝)", group = "Changed", bump = "patch" },
  { message = "^(perf|⚡️)", group = "Changed", bump = "patch" },
  { message = "^(refactor|🎨|🔥|♻️)", group = "Refactor", skip = true },
  { message = "^(style|💄)", group = "Changed" },
  { message = "^(test|✅)", group = "Fixed", skip = true },
  { message = "^(chore\\(release\\): prepare for|🔖|🚀)", skip = true },
  { message = "^(chore\\(deps\\)|⬇️|⬆️|➕|➖)", group = "Changed", bump = "minor" },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^(chore|ci|💚|👷|🚧)", group = "Changed", skip = true },
  { message = "^(🔒️|🔐)", group = "Security", bump = "patch" },
  { body = ".*security", group = "Security", bump = "patch" },
  { message = "^revert", group = "Changed" },
  { message = "^.*: add", group = "Added", bump = "minor" },
  { message = "^.*: support", group = "Added", bump = "minor" },
  { message = "^.*: remove", group = "Removed", bump = "minor" },
  { message = "^.*: delete", group = "Removed", bump = "minor" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = true
# regex for matching git tags
tag_pattern = "[0-9]+\\.[0-9]+\\.[0-9]+.*"

# regex for skipping tags
skip_tags = ""
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42

[bump]
# Initial version for new projects/modules
initial_tag = "1.0.0"
# Bump minor version for each feature
features_always_bump_minor = true
# Bump major version for breaking changes
breaking_always_bump_major = true
