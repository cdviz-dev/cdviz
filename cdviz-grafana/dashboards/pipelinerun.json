{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 5,
  "links": [],
  "panels": [
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 3,
      "panels": [],
      "title": "Latest Pipeline run",
      "type": "row"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 1
      },
      "id": 2,
      "maxPerRow": 2,
      "options": {
        "afterRender": "// ```json\n// {{{json @root}}}\n// ```\n// Display a horizontal bar chart:\n// - with double y axis\n// - with a tooltip\n// - with a fixed number of bars\nimport(\"https://esm.sh/d3@7.9.0\").then((d3) => {\n  // config\n  const withQueuedDuration = true;\n  const visibleBars = 20; // try to align with LIMIT on the query\n\n  // retreive & prepare data\n  const data = context.data[0].reverse().slice(0, visibleBars);\n\n  // Create the SVG container.\n  // try to fit the container to the size of the panel\n  const container = context.element;\n  const rect = container.parentNode.getBoundingClientRect();\n  //const rect = container.getBoundingClientRect();\n  const width = rect.width;\n  const height = rect.height;\n  const marginTop = 20;\n  const marginRight = 20;\n  const marginBottom = 20;\n  const marginLeft = 50;\n\n  // Create the SVG container.\n  const svg = d3\n    .create(\"svg\")\n    //.attr(\"width\", width)\n    .attr(\"height\", height * 0.90)\n    //.attr(\"width\", \"100%\")\n    .attr(\"font-family\", \"sans-serif\")\n    //.attr(\"font-size\", side / 40)\n    .style(\"display\", \"block\")\n    .style(\"max-width\", \"100%\")\n    //.style(\"height\", \"auto\")\n    ;\n  svg\n    .attr(\"viewBox\", [0, 0, width, height])\n    .attr(\"preserveAspectRatio\", \"none\");\n  //.attr(\"preserveAspectRation\", \"xMaxYMax\")\n  //.append(\"g\")\n  //.attr(\"transform\", \"translate(\" + marginLeft + \",\" + marginTop + \")\")\n  ;\n  // Add tooltip on over\n\n  const getTooltipContent = (d) => {\n    const formatDuration = (t) => (\n      t ? `${t / 60 | 0}m ${t % 60}s` : \"\"\n    );\n    let adds = \"\"\n    if (withQueuedDuration) {\n      adds += `<br/>queued: ${formatDuration(d.queued_duration)}`\n    }\n    return `<b>${d3.isoFormat(new Date(d.at))}</b>\n        <br/>run id: ${d.subject_id || \"-\"}\n        <br/>result: ${d.outcome || \"-\"}\n        <br/>run: ${formatDuration(d.run_duration)}\n        ${adds}\n        <br/><br/><i>click for details</i>\n        `;\n  };\n\n  const tooltip = d3\n    .select(document.createElement(\"div\"))\n    .style(\"position\", \"absolute\")\n    .style(\"pointer-events\", \"none\")\n    .style(\"top\", 0)\n    //.style(\"left\", \"100px\")\n    .style(\"opacity\", 0)\n    .style(\"background\", \"white\")\n    .style(\"color\", \"black\")\n    .style(\"border-radius\", \"5px\")\n    .style(\"box-shadow\", \"0 0 10px rgba(0,0,0,.25)\")\n    .style(\"padding\", \"10px\")\n    .style(\"line-height\", \"1.3\")\n    .style(\"font\", \"11px sans-serif\")\n    //.style(\"z-index\", \"200\")\n    ;\n  const mouseover = (event, d) => {\n    //d3.select(this).select(\"circle\").attr(\"fill\", color(d.id).darker())\n    tooltip.style(\"opacity\", 1).html(getTooltipContent(d));\n  };\n\n  const mouseleave = (event, d) => {\n    //d3.select(this).select(\"circle\").attr(\"fill\", color(d.id))\n    tooltip.style(\"opacity\", 0);\n  };\n  const mousemove = (event, d) => {\n    const [x, y] = d3.pointer(event, container);\n    const area = container.getBoundingClientRect();\n    const tooltipRect = tooltip.node().getBoundingClientRect();\n    let topicLeft = x + 10;\n    if (topicLeft + tooltipRect.width > area.width) {\n      topicLeft = x - (10 + tooltipRect.width + 30); // 60 for approx with of mouse\n    }\n    let topicTop = y;\n    if (topicTop + tooltipRect.height > area.height) {\n      topicTop = area.height - tooltipRect.height;\n    }\n\n    tooltip.style(\"left\", topicLeft + \"px\").style(\"top\", topicTop + \"px\");\n  };\n\n  // Declare the x (horizontal position) scale.\n  const x = d3.scaleBand()\n    .domain(d3.range(visibleBars))\n    .range([marginLeft, width - marginRight])\n    .padding(0.1);\n\n  // Declare the y (vertical position) scale.\n  const defaultQueuedDisplayed = 2;\n  const defaultRunDisplayed = 10;\n  const y = d3.scaleLinear()\n    .domain([\n      -1 * Math.max(30, (d3.max(data, (d) => d.queued_duration) || defaultQueuedDisplayed)),\n      Math.max(60, (d3.max(data, (d) => d.run_duration) || defaultRunDisplayed))\n    ])\n    .range([height - marginBottom, marginTop]);\n\n  const colors = d3.scaleOrdinal()\n    .domain([\"success\", \"pass\", \"ok\", \"failure\", \"fail\", \"cancel\", \"cancelled\", \"skip\", \"skipped\"])\n    .range([\n      d3.hsl(120, 1, 0.5), // success\n      d3.hsl(120, 1, 0.5), // pass\n      d3.hsl(120, 1, 0.5), // ok\n      d3.hsl(0, 1, 0.5), // failure\n      d3.hsl(0, 1, 0.5), // fail\n      d3.hsl(0, 0, 0.8), // cancel\n      d3.hsl(0, 0, 0.8), // cancelled\n      d3.hsl(0, 0, 0.5), // skip\n      d3.hsl(0, 0, 0.5), // skipped\n    ])\n    .unknown(d3.hsl(229, 1, 0.5)) // blue\n    ;\n\n  // Add a axis every 1 minute\n  // Define the interval for the horizontal axes\n  const interval = 60;\n  const axis = svg.append(\"g\");\n  const ticks = d3.range(Math.round(y.domain()[0] / interval) * interval, Math.round(y.domain()[1] / interval) * interval + 1, interval);\n  axis.append(\"g\").selectAll()\n    .data(ticks)\n    .join(\"text\")\n    .attr(\"fill\", d3.hsl(0, 0, 0.9))\n    .attr(\"x\", 0)\n    .attr(\"y\", d => y(d))\n    .attr(\"dy\", -3)\n    .attr(\"text-anchor\", \"start\")\n    .text(d => `${Math.abs(d)}s`);\n  axis.append(\"g\").selectAll()\n    .data(ticks)\n    .join(\"line\")\n    .attr(\"stroke\", (d, i) => d3.hsl(0, 0, d == 0 ? 0.9 : 0.6))\n    .attr(\"x1\", marginLeft)\n    .attr(\"y1\", (d, i) => y(d))\n    .attr(\"x2\", width - marginRight)\n    .attr(\"y2\", (d, i) => y(d))\n    ;\n\n  // Add a rect for each bar.\n  svg.append(\"g\")\n    .selectAll()\n    .data(data)\n    .join(\"rect\")\n    .attr(\"fill\", (d, i) => colors(d.outcome).copy({ opacity: 0.6 }))\n    .attr(\"stroke\", (d, i) => colors(d.outcome))\n    .attr(\"x\", (d, i) => x(i))\n    .attr(\"y\", (d, i) => y(d.run_duration || defaultRunDisplayed))\n    .attr(\"height\", (d, i) => y(0) - y(d.run_duration || defaultRunDisplayed))\n    .attr(\"width\", x.bandwidth())\n    .on(\"click\", (event, d) => {\n      if (d.url) {\n        window.open(d.url, '_blank');\n      }\n    })\n    //.on(\"mousemove\", mousemove)\n    .on(\"mouseleave\", mouseleave)\n    .on(\"mouseover\", mouseover)\n    ;\n\n  if (withQueuedDuration) {\n    svg.append(\"g\")\n      .selectAll()\n      .data(data)\n      .join(\"rect\")\n      .attr(\"fill\", (d) => colors(d.outcome))\n      .attr(\"stroke\", (d, i) => colors(d.outcome))\n      .attr(\"x\", (d, i) => x(i))\n      .attr(\"y\", (d, i) => y(0))\n      .attr(\"height\", (d, i) => y(0) - y(d.queued_duration || defaultQueuedDisplayed))\n      .attr(\"width\", x.bandwidth())\n      //.on(\"mousemove\", mousemove)\n      .on(\"mouseleave\", mouseleave)\n      .on(\"mouseover\", mouseover)\n      ;\n  }\n\n  container.replaceChildren(svg.node());\n\n  svg.on(\"mousemove\", mousemove);\n  container.appendChild(tooltip.node());\n});\n",
        "content": "",
        "contentPartials": [],
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "auto",
          "language": "html"
        },
        "editors": [
          "afterRender"
        ],
        "externalStyles": [],
        "helpers": "",
        "renderMode": "data",
        "styles": "",
        "wrap": false
      },
      "pluginVersion": "5.7.0",
      "repeat": "pipelineName",
      "repeatDirection": "h",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "${datasource}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "select \n  LEAST(queued_at, started_at, finished_at) AS at,\n  subject_id AS subject_id,\n  extract('epoch' from (started_at - queued_at)) AS queued_duration,\n  extract('epoch' from (finished_at  - started_at)) AS run_duration,\n  -- \n  last_payload -> 'subject' -> 'content' ->> 'url' AS url,\n  outcome AS outcome\n  FROM pipelinerun\n  WHERE \n    ($__timeFilter(queued_at) OR $__timeFilter(finished_at))\n    AND last_payload -> 'subject' -> 'content' ->> 'pipelineName' = ANY(ARRAY[${pipelineNames:sqlstring}]::text[])\n  ORDER BY at DESC\n  LIMIT $limit\n;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "$pipelineNames",
      "type": "marcusolsson-dynamictext-panel"
    }
  ],
  "preload": false,
  "refresh": "",
  "schemaVersion": 41,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "text": "cdviz-db",
          "value": "cdviz-db"
        },
        "name": "datasource",
        "options": [],
        "query": "grafana-postgresql-datasource",
        "refresh": 1,
        "regex": "",
        "type": "datasource"
      },
      {
        "allowCustomValue": true,
        "current": {
          "text": "All",
          "value": "$__all"
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "${datasource}"
        },
        "definition": "SELECT DISTINCT payload -> 'subject' -> 'content' ->> 'pipelineName' AS pipeline\nFROM cdevents_lake\nWHERE \n$__timeFilter(timestamp)\nAND subject = 'pipelinerun'\nORDER BY pipeline",
        "includeAll": true,
        "label": "Pipelines",
        "multi": true,
        "name": "pipelineNames",
        "options": [],
        "query": "SELECT DISTINCT payload -> 'subject' -> 'content' ->> 'pipelineName' AS pipeline\nFROM cdevents_lake\nWHERE \n$__timeFilter(timestamp)\nAND subject = 'pipelinerun'\nORDER BY pipeline",
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "20",
          "value": "20"
        },
        "description": "number of instance to display",
        "hide": 2,
        "name": "limit",
        "query": "20",
        "skipUrlSync": true,
        "type": "constant"
      }
    ]
  },
  "time": {
    "from": "now-7d",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "pipelines",
  "uid": "pipelinerun",
  "version": 2025041720
}
