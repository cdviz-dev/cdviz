{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 3,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${datasource}"
      },
      "description": "Count by Subject & Predicate over the time window",
      "fieldConfig": {
        "defaults": {
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 6,
        "x": 0,
        "y": 0
      },
      "id": 3,
      "options": {
        "afterRender": "// TODO Add [brush](https://d3js.org/d3-brush#d3-brush) to select a region, like with grafana panel\n// TODO Add configuration (from DB ?) to define: order of environment, collor & shape of environment / service / artifact /...\n// based on https://observablehq.com/@d3/zoomable-sunburst\nimport(\"https://esm.sh/d3@7.9.0\").then((d3) => {\n  const data = context.data[0];\n  const marginTop = 20;\n  const marginRight = 20;\n  const marginBottom = 30;\n  // TODO use the width on label on Y axis\n  const marginLeft = 100;\n\n  // Create the SVG container.\n  // try to fit the container to the size of the panel\n  const container = context.element;\n  const rect = container.parentNode.getBoundingClientRect();\n  //const rect = container.getBoundingClientRect();\n  const width = rect.width; //640;\n  const height = rect.height; //400;\n  const side = Math.min(width, height);\n\n  // Create the SVG container.\n  const svg = d3\n    .create(\"svg\")\n    //.attr(\"width\", width)\n    //.attr(\"height\", height)\n    //.attr(\"width\", \"100%\")\n    .attr(\"font-family\", \"sans-serif\")\n    .attr(\"font-size\", side/40)\n    .style(\"display\", \"block\");\n  //.style(\"max-width\", \"100%\")\n  //.style(\"height\", \"auto\")\n  svg\n    //.attr(\"viewBox\", [0, 0, width, height])\n    .attr(\"viewBox\", [-width/2, -height/2, width, height])\n    .attr(\"preserveAspectRatio\", \"none\")\n    //.attr(\"preserveAspectRation\", \"xMaxYMax\")\n    ;\n  //.append(\"g\")\n  //.attr(\"transform\", \"translate(\" + marginLeft + \",\" + marginTop + \")\")\n\n\n\n  // Transform data into a hierarchy\n  const data_hierarchy = { name: \"\", children: [] };\n\n  data.forEach(({ count, subject, predicate }) => {\n    let l1 = data_hierarchy.children.find(d => d.name === subject);\n    if (!l1) {\n      l1 = { name: subject, children: [] };\n      data_hierarchy.children.push(l1);\n    }\n    l1.children.push({ name: predicate, value: count });\n  });\n\n  // Compute the layout.\n  const hierarchy = d3.hierarchy(data_hierarchy)\n    .sum(d => d.value)\n    .sort((a, b) => b.value - a.value);\n  const root = d3.partition().size([2 * Math.PI, hierarchy.height + 1])(hierarchy);\n  root.each(d => d.current = d);\n\n  // Create the color scale.\n  const color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, data_hierarchy.children.length + 1));\n\n  // Create the arc generator.\n  const radius = side / 6;\n  const arc = d3.arc()\n    .startAngle(d => d.x0)\n    .endAngle(d => d.x1)\n    .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))\n    .padRadius(radius * 1.5)\n    .innerRadius(d => d.y0 * radius)\n    .outerRadius(d => Math.max(d.y0 * radius, d.y1 * radius - 1))\n\n  // Append the arcs.\n  const path = svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(root.descendants().slice(1))\n    .join(\"path\")\n    .attr(\"fill\", d => { while (d.depth > 1) d = d.parent; return color(d.data.name); })\n    .attr(\"fill-opacity\", d => arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0)\n    .attr(\"pointer-events\", d => arcVisible(d.current) ? \"auto\" : \"none\")\n    .attr(\"d\", d => arc(d.current));\n\n  // Make them clickable if they have children.\n  path.filter(d => d.children)\n    .style(\"cursor\", \"pointer\")\n    .on(\"click\", clicked);\n\n  const format = d3.format(\",d\");\n  path.append(\"title\")\n    .text(d => `${d.ancestors().map(d => d.data.name).reverse().join(\"/\")}\\n${format(d.value)}`);\n\n  const label = svg.append(\"g\")\n    .attr(\"pointer-events\", \"none\")\n    .attr(\"text-anchor\", \"middle\")\n    .style(\"user-select\", \"none\")\n    .selectAll(\"text\")\n    .data(root.descendants().slice(1))\n    .join(\"text\")\n    .attr(\"dy\", \"0.35em\")\n    .attr(\"fill-opacity\", d => +labelVisible(d.current))\n    .attr(\"transform\", d => labelTransform(d.current))\n    .text(d => d.data.name);\n\n  const parent = svg.append(\"circle\")\n    .datum(root)\n    .attr(\"r\", radius)\n    .attr(\"fill\", \"none\")\n    .attr(\"pointer-events\", \"all\")\n    .on(\"click\", clicked);\n\n  // Handle zoom on click.\n  function clicked(event, p) {\n    parent.datum(p.parent || root);\n\n    root.each(d => d.target = {\n      x0: Math.max(0, Math.min(1, (d.x0 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\n      x1: Math.max(0, Math.min(1, (d.x1 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\n      y0: Math.max(0, d.y0 - p.depth),\n      y1: Math.max(0, d.y1 - p.depth)\n    });\n\n    const t = svg.transition().duration(event.altKey ? 7500 : 750);\n\n    // Transition the data on all arcs, even the ones that arenâ€™t visible,\n    // so that if this transition is interrupted, entering arcs will start\n    // the next transition from the desired position.\n    path.transition(t)\n      .tween(\"data\", d => {\n        const i = d3.interpolate(d.current, d.target);\n        return t => d.current = i(t);\n      })\n      .filter(function (d) {\n        return +this.getAttribute(\"fill-opacity\") || arcVisible(d.target);\n      })\n      .attr(\"fill-opacity\", d => arcVisible(d.target) ? (d.children ? 0.6 : 0.4) : 0)\n      .attr(\"pointer-events\", d => arcVisible(d.target) ? \"auto\" : \"none\")\n\n      .attrTween(\"d\", d => () => arc(d.current));\n\n    label.filter(function (d) {\n      return +this.getAttribute(\"fill-opacity\") || labelVisible(d.target);\n    }).transition(t)\n      .attr(\"fill-opacity\", d => +labelVisible(d.target))\n      .attrTween(\"transform\", d => () => labelTransform(d.current));\n  }\n\n  function arcVisible(d) {\n    return d.y1 <= 3 && d.y0 >= 1 && d.x1 > d.x0;\n  }\n\n  function labelVisible(d) {\n    return d.y1 <= 3 && d.y0 >= 1 && (d.y1 - d.y0) * (d.x1 - d.x0) > 0.03;\n  }\n\n  function labelTransform(d) {\n    const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;\n    const y = (d.y0 + d.y1) / 2 * radius;\n    return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;\n  }\n\n  //svg.on(\"mousemove\", mousemove);\n  container.replaceChildren(svg.node());\n  //container.appendChild(tooltip.node());\n\n});",
        "content": "",
        "contentPartials": [],
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "none",
          "language": "html"
        },
        "editors": [
          "afterRender"
        ],
        "externalStyles": [],
        "helpers": "",
        "renderMode": "data",
        "styles": "",
        "wrap": false
      },
      "pluginVersion": "5.7.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "${datasource}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT COUNT(*) as count, subject, predicate\nFROM cdevents_lake\nWHERE $__timeFilter(timestamp)\n  AND subject = ANY(ARRAY[${subjects:sqlstring}]::text[]))\n  AND predicate = ANY(ARRAY[${predicates:sqlstring}]::text[]))\nGROUP BY subject, predicate\nORDER BY subject, predicate",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "name": "COUNT",
                "parameters": [
                  {
                    "name": "*",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "name": "subject",
                  "type": "string"
                },
                "type": "groupBy"
              },
              {
                "property": {
                  "name": "predicate",
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "cdevents_lake"
        }
      ],
      "title": "How many events?",
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.5,
            "drawStyle": "bars",
            "fillOpacity": 49,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "fieldMinMax": true,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 6,
        "y": 0
      },
      "id": 5,
      "options": {
        "legend": {
          "calcs": [
            "sum"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.6.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "${datasource}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\n  time_bucket('1 hour', timestamp) AS time,\n  concat(subject,'.', predicate) AS kind,\n  COUNT(*)\nFROM cdevents_lake \nWHERE $__timeFilter(timestamp)\n  AND subject = ANY(ARRAY[${subjects:sqlstring}]::text[]))\n  AND predicate = ANY(ARRAY[${predicates:sqlstring}]::text[]))\nGROUP BY time, kind\nORDER BY time, kind",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Events By Hours",
      "transformations": [
        {
          "id": "partitionByValues",
          "options": {
            "fields": [
              "kind"
            ],
            "keepFields": false,
            "naming": {
              "asLabels": true
            }
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${datasource}"
      },
      "description": "Count by Context'source over the time window",
      "fieldConfig": {
        "defaults": {
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 6,
        "x": 18,
        "y": 0
      },
      "id": 4,
      "options": {
        "afterRender": "// TODO Add [brush](https://d3js.org/d3-brush#d3-brush) to select a region, like with grafana panel\n// TODO Add configuration (from DB ?) to define: order of environment, collor & shape of environment / service / artifact /...\n// based on https://observablehq.com/@d3/zoomable-sunburst\nimport(\"https://esm.sh/d3@7.9.0\").then((d3) => {\n  const data = context.data[0];\n  const marginTop = 20;\n  const marginRight = 20;\n  const marginBottom = 30;\n  // TODO use the width on label on Y axis\n  const marginLeft = 100;\n\n  // Create the SVG container.\n  // try to fit the container to the size of the panel\n  const container = context.element;\n  const rect = container.parentNode.getBoundingClientRect();\n  //const rect = container.getBoundingClientRect();\n  const width = rect.width; //640;\n  const height = rect.height; //400;\n  const side = Math.min(width, height);\n  const levelDisplayed = 3 + 1; // +1 for the center\n\n  // Create the SVG container.\n  const svg = d3\n    .create(\"svg\")\n    //.attr(\"width\", width)\n    //.attr(\"height\", height)\n    //.attr(\"width\", \"100%\")\n    .attr(\"font-family\", \"sans-serif\")\n    .attr(\"font-size\", side/40)\n    .style(\"display\", \"block\");\n  //.style(\"max-width\", \"100%\")\n  //.style(\"height\", \"auto\")\n  svg\n    //.attr(\"viewBox\", [0, 0, width, height])\n    .attr(\"viewBox\", [-width/2, -height/2, width, height])\n    .attr(\"preserveAspectRatio\", \"none\")\n    //.attr(\"preserveAspectRation\", \"xMaxYMax\")\n    ;\n  //.append(\"g\")\n  //.attr(\"transform\", \"translate(\" + marginLeft + \",\" + marginTop + \")\")\n\n\n\n  // Transform data into a hierarchy\n  const data_hierarchy = { name: \"\", children: [] };\n\n  data.forEach(({ count, context_source }) => {\n    let fragments = context_source.split(\"/\").filter((v) => !!v && !v.endsWith(\":\"));\n    let parent = data_hierarchy;\n    let i = 0;\n    for (; i < fragments.length -1; i++){\n      let n = parent.children.find(d => d.name === fragments[i]);\n      if (!n) {\n        n = {name: fragments[i], children:[]};\n        parent.children.push(n);\n      }\n      parent = n;\n    }\n    parent.children.push({name: fragments[i], value: count});\n  });\n\n  // Compute the layout.\n  const hierarchy = d3.hierarchy(data_hierarchy)\n    .sum(d => d.value)\n    .sort((a, b) => b.value - a.value);\n  const root = d3.partition().size([2 * Math.PI, hierarchy.height + 1])(hierarchy);\n  root.each(d => d.current = d);\n\n  // Create the color scale.\n  const color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, data_hierarchy.children.length + 1));\n\n  // Create the arc generator.\n  const radius = side / (levelDisplayed * 2);\n  const arc = d3.arc()\n    .startAngle(d => d.x0)\n    .endAngle(d => d.x1)\n    .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))\n    .padRadius(radius * 1.5)\n    .innerRadius(d => d.y0 * radius)\n    .outerRadius(d => Math.max(d.y0 * radius, d.y1 * radius - 1))\n\n  // Append the arcs.\n  const path = svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(root.descendants().slice(1))\n    .join(\"path\")\n    .attr(\"fill\", d => { while (d.depth > 1) d = d.parent; return color(d.data.name); })\n    .attr(\"fill-opacity\", d => arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0)\n    .attr(\"pointer-events\", d => arcVisible(d.current) ? \"auto\" : \"none\")\n    .attr(\"d\", d => arc(d.current));\n\n  // Make them clickable if they have children.\n  path.filter(d => d.children)\n    .style(\"cursor\", \"pointer\")\n    .on(\"click\", clicked);\n\n  const format = d3.format(\",d\");\n  path.append(\"title\")\n    .text(d => `${d.ancestors().map(d => d.data.name).reverse().join(\"/\")}\\n${format(d.value)}`);\n\n  const label = svg.append(\"g\")\n    .attr(\"pointer-events\", \"none\")\n    .attr(\"text-anchor\", \"middle\")\n    .style(\"user-select\", \"none\")\n    .selectAll(\"text\")\n    .data(root.descendants().slice(1))\n    .join(\"text\")\n    .attr(\"dy\", \"0.35em\")\n    .attr(\"fill-opacity\", d => +labelVisible(d.current))\n    .attr(\"transform\", d => labelTransform(d.current))\n    .text(d => d.data.name);\n\n  const parent = svg.append(\"circle\")\n    .datum(root)\n    .attr(\"r\", radius)\n    .attr(\"fill\", \"none\")\n    .attr(\"pointer-events\", \"all\")\n    .on(\"click\", clicked);\n\n  // Handle zoom on click.\n  function clicked(event, p) {\n    parent.datum(p.parent || root);\n\n    root.each(d => d.target = {\n      x0: Math.max(0, Math.min(1, (d.x0 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\n      x1: Math.max(0, Math.min(1, (d.x1 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\n      y0: Math.max(0, d.y0 - p.depth),\n      y1: Math.max(0, d.y1 - p.depth)\n    });\n\n    const t = svg.transition().duration(event.altKey ? 7500 : 750);\n\n    // Transition the data on all arcs, even the ones that arenâ€™t visible,\n    // so that if this transition is interrupted, entering arcs will start\n    // the next transition from the desired position.\n    path.transition(t)\n      .tween(\"data\", d => {\n        const i = d3.interpolate(d.current, d.target);\n        return t => d.current = i(t);\n      })\n      .filter(function (d) {\n        return +this.getAttribute(\"fill-opacity\") || arcVisible(d.target);\n      })\n      .attr(\"fill-opacity\", d => arcVisible(d.target) ? (d.children ? 0.6 : 0.4) : 0)\n      .attr(\"pointer-events\", d => arcVisible(d.target) ? \"auto\" : \"none\")\n\n      .attrTween(\"d\", d => () => arc(d.current));\n\n    label.filter(function (d) {\n      return +this.getAttribute(\"fill-opacity\") || labelVisible(d.target);\n    }).transition(t)\n      .attr(\"fill-opacity\", d => +labelVisible(d.target))\n      .attrTween(\"transform\", d => () => labelTransform(d.current));\n  }\n\n  function arcVisible(d) {\n    return d.y1 <= levelDisplayed && d.y0 >= 1 && d.x1 > d.x0;\n  }\n\n  function labelVisible(d) {\n    return d.y1 <= levelDisplayed && d.y0 >= 1 && (d.y1 - d.y0) * (d.x1 - d.x0) > 0.03;\n  }\n\n  function labelTransform(d) {\n    const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;\n    const y = (d.y0 + d.y1) / 2 * radius;\n    return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;\n  }\n\n  //svg.on(\"mousemove\", mousemove);\n  container.replaceChildren(svg.node());\n  //container.appendChild(tooltip.node());\n\n});",
        "content": "",
        "contentPartials": [],
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "none",
          "language": "html"
        },
        "editors": [
          "afterRender"
        ],
        "externalStyles": [],
        "helpers": "",
        "renderMode": "data",
        "styles": "",
        "wrap": false
      },
      "pluginVersion": "5.7.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "${datasource}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT COUNT(*) as count, \"payload\" -> 'context' ->> 'source' as \"context_source\"\nFROM cdevents_lake\nWHERE $__timeFilter(timestamp)\n  AND subject = ANY(ARRAY[${subjects:sqlstring}]::text[]))\n  AND predicate = ANY(ARRAY[${predicates:sqlstring}]::text[]))\nGROUP BY context_source\nORDER BY context_source\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "name": "COUNT",
                "parameters": [
                  {
                    "name": "*",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "name": "subject",
                  "type": "string"
                },
                "type": "groupBy"
              },
              {
                "property": {
                  "name": "predicate",
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "cdevents_lake"
        }
      ],
      "title": "How many sources?",
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${datasource}"
      },
      "description": "List the ${limit} first events",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "subject"
            },
            "properties": []
          },
          {
            "matcher": {
              "id": "byName",
              "options": "predicate"
            },
            "properties": []
          },
          {
            "matcher": {
              "id": "byName",
              "options": "imported_at"
            },
            "properties": []
          },
          {
            "matcher": {
              "id": "byName",
              "options": "timestamp"
            },
            "properties": []
          }
        ]
      },
      "gridPos": {
        "h": 20,
        "w": 24,
        "x": 0,
        "y": 8
      },
      "id": 1,
      "options": {
        "isColumnManagerAvailable": false,
        "nestedObjects": [],
        "saveUserPreference": false,
        "showFiltersInColumnManager": false,
        "tables": [
          {
            "actionsColumnConfig": {
              "alignment": "start",
              "fontSize": "md",
              "label": "",
              "width": {
                "auto": false,
                "value": 100
              }
            },
            "addRow": {
              "enabled": false,
              "permission": {
                "mode": "",
                "userRole": []
              },
              "request": {
                "datasource": "",
                "payload": {}
              }
            },
            "deleteRow": {
              "enabled": false,
              "permission": {
                "mode": "",
                "userRole": []
              },
              "request": {
                "datasource": "",
                "payload": {}
              }
            },
            "expanded": true,
            "items": [
              {
                "aggregation": "none",
                "appearance": {
                  "alignment": "start",
                  "background": {
                    "applyToRow": false
                  },
                  "colors": {},
                  "header": {
                    "fontSize": "md"
                  },
                  "width": {
                    "auto": true,
                    "max": 100,
                    "min": 20,
                    "value": 100
                  },
                  "wrap": true
                },
                "columnTooltip": "",
                "edit": {
                  "editor": {
                    "type": "string"
                  },
                  "enabled": false,
                  "permission": {
                    "mode": "",
                    "userRole": []
                  }
                },
                "enabled": true,
                "field": {
                  "name": "timestamp",
                  "source": "A"
                },
                "fileCell": {
                  "size": "md",
                  "text": "",
                  "variant": "primary"
                },
                "filter": {
                  "enabled": false,
                  "mode": "client",
                  "variable": ""
                },
                "footer": [],
                "gauge": {
                  "mode": "basic",
                  "valueDisplayMode": "text",
                  "valueSize": 14
                },
                "group": false,
                "label": "",
                "newRowEdit": {
                  "editor": {
                    "type": "string"
                  },
                  "enabled": false
                },
                "objectId": "",
                "pin": "left",
                "preformattedStyle": false,
                "scale": "auto",
                "showingRows": 20,
                "sort": {
                  "descFirst": true,
                  "enabled": true
                },
                "type": "auto"
              },
              {
                "aggregation": "none",
                "appearance": {
                  "alignment": "start",
                  "background": {
                    "applyToRow": false
                  },
                  "colors": {},
                  "header": {
                    "fontSize": "md"
                  },
                  "width": {
                    "auto": true,
                    "max": 130,
                    "min": 20,
                    "value": 100
                  },
                  "wrap": true
                },
                "columnTooltip": "",
                "edit": {
                  "editor": {
                    "type": "string"
                  },
                  "enabled": false,
                  "permission": {
                    "mode": "",
                    "userRole": []
                  }
                },
                "enabled": true,
                "field": {
                  "name": "subject",
                  "source": "A"
                },
                "fileCell": {
                  "size": "md",
                  "text": "",
                  "variant": "primary"
                },
                "filter": {
                  "enabled": false,
                  "mode": "client",
                  "variable": ""
                },
                "footer": [],
                "gauge": {
                  "mode": "basic",
                  "valueDisplayMode": "text",
                  "valueSize": 14
                },
                "group": false,
                "label": "",
                "newRowEdit": {
                  "editor": {
                    "type": "string"
                  },
                  "enabled": false
                },
                "objectId": "",
                "pin": "",
                "preformattedStyle": false,
                "scale": "auto",
                "showingRows": 20,
                "sort": {
                  "descFirst": false,
                  "enabled": false
                },
                "type": "auto"
              },
              {
                "aggregation": "none",
                "appearance": {
                  "alignment": "start",
                  "background": {
                    "applyToRow": false
                  },
                  "colors": {},
                  "header": {
                    "fontSize": "md"
                  },
                  "width": {
                    "auto": true,
                    "max": 130,
                    "min": 20,
                    "value": 100
                  },
                  "wrap": true
                },
                "columnTooltip": "",
                "edit": {
                  "editor": {
                    "type": "string"
                  },
                  "enabled": false,
                  "permission": {
                    "mode": "",
                    "userRole": []
                  }
                },
                "enabled": true,
                "field": {
                  "name": "predicate",
                  "source": "A"
                },
                "fileCell": {
                  "size": "md",
                  "text": "",
                  "variant": "primary"
                },
                "filter": {
                  "enabled": false,
                  "mode": "client",
                  "variable": ""
                },
                "footer": [],
                "gauge": {
                  "mode": "basic",
                  "valueDisplayMode": "text",
                  "valueSize": 14
                },
                "group": false,
                "label": "",
                "newRowEdit": {
                  "editor": {
                    "type": "string"
                  },
                  "enabled": false
                },
                "objectId": "",
                "pin": "",
                "preformattedStyle": false,
                "scale": "auto",
                "showingRows": 20,
                "sort": {
                  "descFirst": false,
                  "enabled": false
                },
                "type": "auto"
              },
              {
                "aggregation": "none",
                "appearance": {
                  "alignment": "start",
                  "background": {
                    "applyToRow": false
                  },
                  "colors": {},
                  "header": {
                    "fontSize": "md"
                  },
                  "width": {
                    "auto": true,
                    "min": 300,
                    "value": 100
                  },
                  "wrap": false
                },
                "columnTooltip": "",
                "edit": {
                  "editor": {
                    "type": "string"
                  },
                  "enabled": false,
                  "permission": {
                    "mode": "",
                    "userRole": []
                  }
                },
                "enabled": true,
                "field": {
                  "name": "payload_subject",
                  "source": "A"
                },
                "fileCell": {
                  "size": "md",
                  "text": "",
                  "variant": "primary"
                },
                "filter": {
                  "enabled": false,
                  "mode": "client",
                  "variable": ""
                },
                "footer": [],
                "gauge": {
                  "mode": "basic",
                  "valueDisplayMode": "text",
                  "valueSize": 14
                },
                "group": false,
                "label": "",
                "newRowEdit": {
                  "editor": {
                    "type": "string"
                  },
                  "enabled": false
                },
                "objectId": "",
                "pin": "",
                "preformattedStyle": false,
                "scale": "auto",
                "showingRows": 20,
                "sort": {
                  "descFirst": false,
                  "enabled": false
                },
                "type": "json"
              },
              {
                "aggregation": "none",
                "appearance": {
                  "alignment": "start",
                  "background": {
                    "applyToRow": false
                  },
                  "colors": {},
                  "header": {
                    "fontSize": "md"
                  },
                  "width": {
                    "auto": true,
                    "min": 300,
                    "value": 100
                  },
                  "wrap": false
                },
                "columnTooltip": "",
                "edit": {
                  "editor": {
                    "type": "string"
                  },
                  "enabled": false,
                  "permission": {
                    "mode": "",
                    "userRole": []
                  }
                },
                "enabled": true,
                "field": {
                  "name": "payload_context",
                  "source": "A"
                },
                "fileCell": {
                  "size": "md",
                  "text": "",
                  "variant": "primary"
                },
                "filter": {
                  "enabled": false,
                  "mode": "client",
                  "variable": ""
                },
                "footer": [],
                "gauge": {
                  "mode": "basic",
                  "valueDisplayMode": "text",
                  "valueSize": 14
                },
                "group": false,
                "label": "",
                "newRowEdit": {
                  "editor": {
                    "type": "string"
                  },
                  "enabled": false
                },
                "objectId": "",
                "pin": "",
                "preformattedStyle": false,
                "scale": "auto",
                "showingRows": 20,
                "sort": {
                  "descFirst": false,
                  "enabled": false
                },
                "type": "json"
              },
              {
                "aggregation": "none",
                "appearance": {
                  "alignment": "start",
                  "background": {
                    "applyToRow": false
                  },
                  "colors": {},
                  "header": {
                    "fontSize": "md"
                  },
                  "width": {
                    "auto": true,
                    "max": 100,
                    "min": 20,
                    "value": 100
                  },
                  "wrap": true
                },
                "columnTooltip": "",
                "edit": {
                  "editor": {
                    "type": "string"
                  },
                  "enabled": false,
                  "permission": {
                    "mode": "",
                    "userRole": []
                  }
                },
                "enabled": true,
                "field": {
                  "name": "imported_at",
                  "source": "A"
                },
                "fileCell": {
                  "size": "md",
                  "text": "",
                  "variant": "primary"
                },
                "filter": {
                  "enabled": false,
                  "mode": "client",
                  "variable": ""
                },
                "footer": [],
                "gauge": {
                  "mode": "basic",
                  "valueDisplayMode": "text",
                  "valueSize": 14
                },
                "group": false,
                "label": "",
                "newRowEdit": {
                  "editor": {
                    "type": "string"
                  },
                  "enabled": false
                },
                "objectId": "",
                "pin": "",
                "preformattedStyle": false,
                "scale": "auto",
                "showingRows": 20,
                "sort": {
                  "descFirst": false,
                  "enabled": false
                },
                "type": "auto"
              }
            ],
            "name": "Events",
            "pagination": {
              "defaultPageSize": 10,
              "enabled": true,
              "mode": "query",
              "query": {
                "offsetVariable": "offset",
                "pageIndexVariable": "pageIndex",
                "pageSizeVariable": "pageSize",
                "totalCountField": {
                  "name": "count",
                  "source": "B"
                }
              }
            },
            "rowHighlight": {
              "backgroundColor": "transparent",
              "columnId": "",
              "enabled": false,
              "scrollTo": "",
              "smooth": false,
              "variable": ""
            },
            "showHeader": true,
            "update": {
              "datasource": "",
              "payload": {}
            }
          }
        ],
        "tabsSorting": false,
        "toolbar": {
          "alignment": "left",
          "export": true,
          "exportFormats": [
            "xlsx",
            "csv"
          ]
        }
      },
      "pluginVersion": "2.5.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "${datasource}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\n  \"timestamp\",\n  \"subject\",\n  \"predicate\",\n  \"payload\" -> 'subject' as \"payload_subject\",\n  \"payload\" -> 'context' as \"payload_context\",\n  \"imported_at\"\nFROM\n  cdevents_lake\nWHERE\n  $__timeFilter(timestamp)\n  AND subject = ANY(ARRAY[${subjects:sqlstring}]::text[]))\n  AND predicate = ANY(ARRAY[${predicates:sqlstring}]::text[]))\nORDER BY\n  imported_at DESC\nLIMIT\n  ${pageSize}\nOFFSET\n  ${offset}",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "${datasource}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT\n  count(*)\nFROM\n  cdevents_lake\nWHERE\n  $__timeFilter(imported_at)\n  AND ('${subjects:raw}' = '' OR subject IN (${subjects:sqlstring}))\n  AND ('${predicates:raw}' = '' OR predicate IN (${predicates:sqlstring}))",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Events Logs",
      "type": "volkovlabs-table-panel"
    }
  ],
  "preload": false,
  "refresh": "",
  "schemaVersion": 41,
  "tags": [],
  "templating": {
    "list": [
      {
        "allowCustomValue": false,
        "current": {
          "text": "cdviz-db",
          "value": "P6DDDCA02457485AA"
        },
        "hide": 1,
        "name": "datasource",
        "options": [],
        "query": "grafana-postgresql-datasource",
        "refresh": 1,
        "regex": "",
        "type": "datasource"
      },
      {
        "current": {
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "cdviz-db"
        },
        "definition": "SELECT DISTINCT \"subject\" FROM \"cdevents_lake\" WHERE \"subject\" LIKE '$__searchFilter' AND $__timeFilter(imported_at)",
        "includeAll": true,
        "label": "subjects",
        "multi": true,
        "name": "subjects",
        "options": [],
        "query": "SELECT DISTINCT \"subject\" FROM \"cdevents_lake\" WHERE \"subject\" LIKE '$__searchFilter' AND $__timeFilter(imported_at)",
        "refresh": 2,
        "regex": "",
        "sort": 5,
        "type": "query"
      },
      {
        "current": {
          "text": "All",
          "value": [
            "$__all"
          ]
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "cdviz-db"
        },
        "definition": "SELECT DISTINCT \"predicate\" FROM \"cdevents_lake\" WHERE \"predicate\" LIKE '$__searchFilter' AND subject IN ($subjects) AND $__timeFilter(imported_at)",
        "includeAll": true,
        "label": "predicates",
        "multi": true,
        "name": "predicates",
        "options": [],
        "query": "SELECT DISTINCT \"predicate\" FROM \"cdevents_lake\" WHERE \"predicate\" LIKE '$__searchFilter' AND subject IN ($subjects) AND $__timeFilter(imported_at)",
        "refresh": 2,
        "regex": "",
        "sort": 5,
        "type": "query"
      },
      {
        "current": {
          "text": "10",
          "value": "10"
        },
        "description": "The number of rows per page. Specify as a dashboard variable name.",
        "hide": 2,
        "includeAll": false,
        "label": "pageSize",
        "name": "pageSize",
        "options": [
          {
            "selected": true,
            "text": "10",
            "value": "10"
          }
        ],
        "query": "10",
        "type": "custom"
      },
      {
        "current": {
          "text": "",
          "value": ""
        },
        "description": "Page order number. Specify as a dashboard variable name.",
        "hide": 2,
        "name": "pageIndex",
        "options": [],
        "query": "",
        "type": "custom"
      },
      {
        "current": {
          "text": "0",
          "value": "0"
        },
        "description": "How many rows to skip starting from the first. Specify as a dashboard variable name.",
        "hide": 2,
        "name": "offset",
        "options": [
          {
            "selected": true,
            "text": "0",
            "value": "0"
          }
        ],
        "query": "0",
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "now-7d",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "cdevents activity",
  "uid": "cdevents-activity",
  "version": 2025041021
}
