{
  "timezone": "browser",
  "editable": true,
  "graphTooltip": 0,
  "fiscalYearStartMonth": 0,
  "schemaVersion": 39,
  "templating": {
    "list": [
      {
        "type": "datasource",
        "name": "datasource",
        "skipUrlSync": false,
        "multi": false,
        "includeAll": false,
        "auto": false,
        "auto_min": "10s",
        "auto_count": 30,
        "query": "grafana-postgresql-datasource",
        "regex": "cdviz.*"
      },
      {
        "type": "query",
        "name": "selected_value",
        "skipUrlSync": false,
        "multi": true,
        "includeAll": true,
        "auto": false,
        "auto_min": "10s",
        "auto_count": 30,
        "label": "Test Suite",
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "${datasource}"
        },
        "query": "SELECT DISTINCT payload -> 'subject' -> 'content' -> 'testSuite' ->> 'name' AS __value\nFROM cdviz.cdevents_lake\nWHERE $__timeFilter(timestamp)\nAND subject = 'testcasesuite'\nORDER BY __value",
        "sort": 0,
        "refresh": 2,
        "current": {
          "text": "All",
          "value": "$__all"
        }
      },
      {
        "type": "constant",
        "name": "limit",
        "skipUrlSync": false,
        "multi": false,
        "includeAll": false,
        "auto": false,
        "auto_min": "10s",
        "auto_count": 30,
        "hide": 2,
        "query": "20"
      }
    ]
  },
  "annotations": {},
  "title": "Test Suite: Latest Executions",
  "uid": "testcasesuite_executions",
  "tags": [
    "testcasesuite"
  ],
  "time": {
    "from": "now-7d",
    "to": "now"
  },
  "panels": [
    {
      "type": "row",
      "collapsed": false,
      "id": 0,
      "panels": [],
      "title": "Test Suite: Latest $limit Executions",
      "gridPos": {
        "x": 0,
        "y": 0,
        "h": 1,
        "w": 24
      }
    },
    {
      "type": "marcusolsson-dynamictext-panel",
      "transparent": false,
      "repeatDirection": "h",
      "options": {
        "afterRender": "import(\"https://esm.sh/d3@7.9.0\").then((d3) => {\n// src/panels/browser_scripts/tooltip.ts\nclass Tooltip {\n  getTooltipContent;\n  el;\n  constructor(container, getTooltipContent) {\n    this.getTooltipContent = getTooltipContent;\n    this.el = d3.select(document.createElement(\"div\")).style(\"position\", \"absolute\").style(\"pointer-events\", \"none\").style(\"top\", 0).style(\"opacity\", 0).style(\"background\", \"white\").style(\"color\", \"black\").style(\"border-radius\", \"5px\").style(\"box-shadow\", \"0 0 10px rgba(0,0,0,.25)\").style(\"padding\", \"10px\").style(\"line-height\", \"1.3\").style(\"font\", \"11px sans-serif\");\n    container.appendChild(this.el.node());\n  }\n  showOnMouseover(event, d) {\n    const content = this.getTooltipContent(d);\n    this.el.style(\"opacity\", 1).html(content);\n    this.move(event, d);\n  }\n  hideOnMouseleave(event, d) {\n    this.el.style(\"opacity\", 0);\n  }\n  move(event, d) {\n    const element = this.el.node();\n    if (!element)\n      return;\n    const container = element.parentNode;\n    const [x, y] = d3.pointer(event, container);\n    const area = container.getBoundingClientRect();\n    const tooltipRect = element.getBoundingClientRect();\n    let topicLeft = x + 10;\n    if (topicLeft + tooltipRect.width > area.width) {\n      topicLeft = Math.max(0, x - (10 + tooltipRect.width + 30));\n    }\n    let topicTop = y;\n    if (topicTop + tooltipRect.height > area.height) {\n      topicTop = Math.max(0, area.height - tooltipRect.height);\n    }\n    this.el.style(\"left\", `${topicLeft}px`).style(\"top\", `${topicTop}px`);\n  }\n}\n\n// src/panels/browser_scripts/utils.ts\nfunction newSvgArea(container) {\n  const rect = container.parentNode.getBoundingClientRect();\n  const width = rect.width;\n  const height = rect.height;\n  const svg = d3.create(\"svg\").attr(\"width\", \"93%\").attr(\"font-family\", \"sans-serif\").style(\"display\", \"block\");\n  svg.attr(\"viewBox\", [0, 0, width, height]).attr(\"preserveAspectRatio\", \"none\");\n  container.replaceChildren(svg.node());\n  return { svg, width, height };\n}\n\n// src/panels/browser_scripts/draw_barchart_double.ts\nfunction draw(context) {\n  const withQueuedDuration = true;\n  const visibleBars = 20;\n  const data = (context.data[0] || []).reverse().slice(0, visibleBars);\n  const marginTop = 20;\n  const marginRight = 20;\n  const marginBottom = 20;\n  const marginLeft = 50;\n  const container = context.element;\n  const { svg, width, height } = newSvgArea(container);\n  const tooltip = new Tooltip(container, (d) => {\n    const formatDuration = (t) => t ? `${t / 60 | 0}m ${t % 60}s` : \"\";\n    let adds = \"\";\n    if (withQueuedDuration) {\n      adds += `<br/>queued: ${formatDuration(d.queued_duration)}`;\n    }\n    return `<b>${d3.isoFormat(new Date(d.at))}</b>\n        <br/>run id: ${d.subject_id || \"-\"}\n        <br/>result: ${d.outcome || \"-\"}\n        <br/>run: ${formatDuration(d.run_duration)}\n        ${adds}\n        <br/><br/><i>click for details</i>\n        `;\n  });\n  const x = d3.scaleBand().domain(d3.range(visibleBars)).range([marginLeft, width - marginRight]).padding(0.1);\n  const defaultQueuedDisplayed = 2;\n  const defaultRunDisplayed = 10;\n  const y = d3.scaleLinear().domain([\n    -1 * Math.max(30, d3.max(data, (d) => d.queued_duration) || defaultQueuedDisplayed),\n    Math.max(60, d3.max(data, (d) => d.run_duration) || defaultRunDisplayed)\n  ]).range([height - marginBottom, marginTop]);\n  const colors = d3.scaleOrdinal().domain([\n    \"success\",\n    \"pass\",\n    \"ok\",\n    \"failure\",\n    \"fail\",\n    \"cancel\",\n    \"cancelled\",\n    \"skip\",\n    \"skipped\"\n  ]).range([\n    d3.hsl(120, 1, 0.5),\n    d3.hsl(120, 1, 0.5),\n    d3.hsl(120, 1, 0.5),\n    d3.hsl(0, 1, 0.5),\n    d3.hsl(0, 1, 0.5),\n    d3.hsl(0, 0, 0.8),\n    d3.hsl(0, 0, 0.8),\n    d3.hsl(0, 0, 0.5),\n    d3.hsl(0, 0, 0.5)\n  ]).unknown(d3.hsl(229, 1, 0.5));\n  const interval = 60;\n  const axis = svg.append(\"g\");\n  const ticks = d3.range(Math.round(y.domain()[0] / interval) * interval, Math.round(y.domain()[1] / interval) * interval + 1, interval);\n  axis.append(\"g\").selectAll().data(ticks).join(\"text\").attr(\"fill\", d3.hsl(0, 0, 0.9).toString()).attr(\"x\", 0).attr(\"y\", (d) => y(d)).attr(\"dy\", -3).attr(\"text-anchor\", \"start\").text((d) => `${Math.abs(d)}s`);\n  axis.append(\"g\").selectAll().data(ticks).join(\"line\").attr(\"stroke\", (d, i) => d3.hsl(0, 0, d === 0 ? 0.9 : 0.6).toString()).attr(\"x1\", marginLeft).attr(\"y1\", (d, i) => y(d)).attr(\"x2\", width - marginRight).attr(\"y2\", (d, i) => y(d));\n  svg.append(\"g\").selectAll().data(data).join(\"rect\").attr(\"fill\", (d, i) => colors(d.outcome).copy({ opacity: 0.6 }).toString()).attr(\"stroke\", (d, i) => colors(d.outcome).toString()).attr(\"x\", (d, i) => x(i) || 0).attr(\"y\", (d, i) => y(d.run_duration || defaultRunDisplayed)).attr(\"height\", (d, i) => y(0) - y(d.run_duration || defaultRunDisplayed)).attr(\"width\", x.bandwidth()).on(\"click\", (event, d) => {\n    if (d.url) {\n      window.open(d.url, \"_blank\");\n    }\n  }).on(\"mouseleave\", (e, d) => tooltip.hideOnMouseleave(e, d)).on(\"mouseover\", (e, d) => tooltip.showOnMouseover(e, d));\n  if (withQueuedDuration) {\n    svg.append(\"g\").selectAll().data(data).join(\"rect\").attr(\"fill\", (d) => colors(d.outcome).toString()).attr(\"stroke\", (d, i) => colors(d.outcome).toString()).attr(\"x\", (d, i) => x(i) || 0).attr(\"y\", (d, i) => y(0)).attr(\"height\", (d, i) => y(0) - y(d.queued_duration || defaultQueuedDisplayed)).attr(\"width\", x.bandwidth()).on(\"mouseleave\", (e, d) => tooltip.hideOnMouseleave(e, d)).on(\"mouseover\", (e, d) => tooltip.showOnMouseover(e, d));\n  }\n}\n\ndraw(context);});\n",
        "content": "",
        "contentPartials": [],
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "auto",
          "language": "html"
        },
        "editors": [
          "afterRender"
        ],
        "externalStyles": [],
        "helpers": "",
        "renderMode": "data",
        "style": "",
        "wrap": false
      },
      "title": "$selected_value",
      "repeat": "selected_value",
      "maxPerRow": 2,
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${datasource}"
      },
      "targets": [
        {
          "format": "table",
          "rawSql": "SELECT\n  LEAST(started_at, finished_at) AS at,\n  subject_id AS subject_id,\n  \n  extract('epoch' from (finished_at - started_at)) AS run_duration,\n  --\n  last_payload -> 'subject' -> 'content' ->> 'url' AS url,\n  outcome AS outcome\nFROM cdviz.testcasesuite\nWHERE\n  $__timeFilter(finished_at)\n  AND last_payload -> 'subject' -> 'content' -> 'testSuite' ->> 'name' = ANY(ARRAY[${selected_value:sqlstring}]::text[])\n  ORDER BY at DESC\n  LIMIT $limit",
          "refId": "",
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "${datasource}"
          },
          "editorMode": "code",
          "rawQuery": true
        }
      ],
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 0,
        "y": 1
      }
    }
  ],
  "version": 2025060716
}
