{
  "timezone": "browser",
  "editable": true,
  "graphTooltip": 0,
  "fiscalYearStartMonth": 0,
  "schemaVersion": 39,
  "templating": {
    "list": [
      {
        "type": "datasource",
        "name": "datasource",
        "skipUrlSync": false,
        "multi": false,
        "includeAll": false,
        "auto": false,
        "auto_min": "10s",
        "auto_count": 30,
        "query": "grafana-postgresql-datasource",
        "regex": "cdviz.*"
      },
      {
        "type": "query",
        "name": "artifact_fnames",
        "skipUrlSync": false,
        "multi": true,
        "includeAll": true,
        "auto": false,
        "auto_min": "10s",
        "auto_count": 30,
        "label": "Artifacts",
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "${datasource}"
        },
        "query": "SELECT DISTINCT SUBSTRING(payload -> 'subject' ->> 'id' FROM 'pkg:([^@\\\\?]+)') as __value\nFROM cdevents_lake\nWHERE $__timeFilter(timestamp)\n  AND subject = 'artifact'\n  AND predicate = ANY(ARRAY['published', 'signed'])\n\nUNION\n\nSELECT DISTINCT SUBSTRING(payload -> 'subject' -> 'content' ->> 'artifactId' FROM 'pkg:([^@\\\\?]+)') as __value\nFROM cdevents_lake\nWHERE $__timeFilter(timestamp)\n  AND subject = 'service'\n  AND predicate = ANY(ARRAY['deployed', 'upgraded', 'rolledback'])",
        "sort": 0,
        "refresh": 2,
        "current": {
          "text": "All",
          "value": "$__all"
        },
        "description": "Artifact type + namespace + name"
      }
    ]
  },
  "annotations": {},
  "title": "Artifact Timeline",
  "uid": "artifact_timeline",
  "tags": [
    "cd",
    "cdviz"
  ],
  "time": {
    "from": "now-7d",
    "to": "now"
  },
  "panels": [
    {
      "type": "marcusolsson-dynamictext-panel",
      "transparent": false,
      "repeatDirection": "h",
      "options": {
        "afterRender": "import(\"https://esm.sh/d3@7.9.0\").then((d3) => {\n// src/panels/browser_scripts/artifact_info.ts\nclass ArtifactInfo {\n  base;\n  version;\n  tags;\n  constructor(artifactId) {\n    const url = new URL(artifactId);\n    const [base, version] = url.pathname.split(\"@\");\n    this.base = base;\n    this.version = version ? decodeURIComponent(version) : version;\n    this.tags = new Set(url.searchParams.getAll(\"tag\"));\n  }\n  isSimilarTo(other, debug) {\n    let res = this.base === other.base;\n    if (!!this.version && !!other.version) {\n      res = res && this.version === other.version;\n    } else if (this.tags.size > 0 && other.tags.size > 0) {\n      const intersection = this.tags.intersection(other.tags);\n      intersection.delete(\"latest\");\n      res = res && intersection.size > 0;\n    } else {\n      res = res && this.tags === other.tags && this.version === other.version;\n    }\n    return res;\n  }\n  mergeVersionAndTags(other) {\n    this.version = this.version || other.version;\n    this.tags = this.tags.union(other.tags);\n  }\n}\n\n// src/panels/browser_scripts/data_stages.ts\nfunction transformData(data) {\n  const series = groupBySeries(data);\n  const domains = extractDomains(series);\n  return {\n    series,\n    domains\n  };\n}\nfunction groupBySeries(data) {\n  const res = [];\n  for (const it of data) {\n    const artifactInfo = new ArtifactInfo(it.artifact_id);\n    let dest = res.find((el) => artifactInfo.isSimilarTo(el[0]));\n    if (!dest) {\n      dest = [artifactInfo, []];\n      res.push(dest);\n    }\n    dest[0].mergeVersionAndTags(artifactInfo);\n    const datum = {\n      timestamp: it.timestamp,\n      action: it.action,\n      stage: it.stage,\n      artifactInfo: dest[0]\n    };\n    dest[1].push(datum);\n  }\n  return res.map((el) => el[1]);\n}\nfunction extractDomains(data) {\n  let timestampMin = Number.MAX_SAFE_INTEGER;\n  let timestampMax = Number.MIN_SAFE_INTEGER;\n  const stagesSet = new Set;\n  for (const serie of data) {\n    for (const d of serie) {\n      if (timestampMin > d.timestamp) {\n        timestampMin = d.timestamp;\n      }\n      if (timestampMax < d.timestamp) {\n        timestampMax = d.timestamp;\n      }\n      stagesSet.add(d.stage);\n    }\n  }\n  if (stagesSet.size < 1) {\n    return {\n      timestampMin: new Date().getTime(),\n      timestampMax: new Date().getTime(),\n      stages: []\n    };\n  }\n  const stages = sortStages(stagesSet, data);\n  return {\n    timestampMin,\n    timestampMax,\n    stages\n  };\n}\nfunction sortStages(stages, seriesValues) {\n  const stagesAndScore = new Map;\n  for (const stage of stages) {\n    stagesAndScore.set(stage, 0);\n  }\n  const maxPoint = stages.size;\n  for (const it of seriesValues) {\n    it.sort((a, b) => a.timestamp - b.timestamp);\n    let point = maxPoint;\n    for (const item of it) {\n      stagesAndScore.set(item.stage, stagesAndScore.get(item.stage) + point);\n      point -= 1;\n    }\n  }\n  const stagesSorted = Array.from(stagesAndScore.keys()).sort((a, b) => stagesAndScore.get(a) - stagesAndScore.get(b));\n  return stagesSorted;\n}\n\n// src/panels/browser_scripts/tooltip.ts\nclass Tooltip {\n  getTooltipContent;\n  el;\n  constructor(container, getTooltipContent) {\n    this.getTooltipContent = getTooltipContent;\n    this.el = d3.select(document.createElement(\"div\")).style(\"position\", \"absolute\").style(\"pointer-events\", \"none\").style(\"top\", 0).style(\"opacity\", 0).style(\"background\", \"white\").style(\"color\", \"black\").style(\"border-radius\", \"5px\").style(\"box-shadow\", \"0 0 10px rgba(0,0,0,.25)\").style(\"padding\", \"10px\").style(\"line-height\", \"1.3\").style(\"font\", \"11px sans-serif\");\n    container.appendChild(this.el.node());\n  }\n  showOnMouseover(event, d) {\n    const content = this.getTooltipContent(d);\n    this.el.style(\"opacity\", 1).html(content);\n    this.move(event, d);\n  }\n  hideOnMouseleave(event, d) {\n    this.el.style(\"opacity\", 0);\n  }\n  move(event, d) {\n    const element = this.el.node();\n    if (!element)\n      return;\n    const container = element.parentNode;\n    const [x, y] = d3.pointer(event, container);\n    const area = container.getBoundingClientRect();\n    const tooltipRect = element.getBoundingClientRect();\n    let topicLeft = x + 10;\n    if (topicLeft + tooltipRect.width > area.width) {\n      topicLeft = Math.max(0, x - (10 + tooltipRect.width + 30));\n    }\n    let topicTop = y;\n    if (topicTop + tooltipRect.height > area.height) {\n      topicTop = Math.max(0, area.height - tooltipRect.height);\n    }\n    this.el.style(\"left\", `${topicLeft}px`).style(\"top\", `${topicTop}px`);\n  }\n}\n\n// src/panels/browser_scripts/utils.ts\nfunction newSvgArea(container) {\n  const rect = container.parentNode.getBoundingClientRect();\n  const width = rect.width;\n  const height = rect.height;\n  const svg = d3.create(\"svg\").attr(\"width\", \"93%\").attr(\"font-family\", \"sans-serif\").style(\"display\", \"block\");\n  svg.attr(\"viewBox\", [0, 0, width, height]).attr(\"preserveAspectRatio\", \"none\");\n  container.replaceChildren(svg.node());\n  return { svg, width, height };\n}\n\n// src/panels/browser_scripts/draw_timeline_version_on_stage.ts\nfunction draw(context) {\n  const data = context.data[0];\n  const marginTop = 20;\n  const marginRight = 100;\n  const marginBottom = 30;\n  const marginLeft = 100;\n  const container = context.element;\n  const { svg, width, height } = newSvgArea(container);\n  const { series, domains } = transformData(data);\n  let domainMax = Math.max(domains.timestampMax, context.grafana.timeRange.to);\n  let domainMin = Math.min(domains.timestampMin, context.grafana.timeRange.from);\n  const domainMargin = (domainMax - domainMin) * 0.05;\n  domainMax += domainMargin;\n  domainMin -= domainMargin;\n  const x = d3.scaleUtc().domain([domainMin, domainMax]).range([marginLeft, width - marginRight]);\n  const y = d3.scaleBand().domain(domains.stages).range([height - marginBottom, marginTop]).padding(0.1);\n  const color = d3.scaleOrdinal().domain(domains.stages).range([\n    \"#facc15\",\n    \"#c084fc\",\n    \"#60a5fa\",\n    \"#a3e635\",\n    \"#9ca3af\"\n  ]);\n  svg.append(\"g\").attr(\"transform\", `translate(0,${height - marginBottom})`).call(d3.axisBottom(x));\n  svg.append(\"g\").attr(\"transform\", `translate(${marginLeft},0)`).call(d3.axisLeft(y)).call((g) => g.select(\".domain\").remove());\n  const interval = 60;\n  const axis = svg.append(\"g\");\n  const ticks = domains.stages;\n  axis.append(\"g\").selectAll().data(ticks).join(\"line\").attr(\"stroke\", (d, i) => d3.hsl(0, 0, 0.2).toString()).attr(\"x1\", marginLeft).attr(\"y1\", (d, i) => (y(d) ?? 0) + y.bandwidth() / 2).attr(\"x2\", width - marginRight).attr(\"y2\", (d, i) => (y(d) ?? 0) + y.bandwidth() / 2);\n  const tooltip = new Tooltip(container, (d) => {\n    const artifactInfo = d.artifactInfo;\n    return `<b>${artifactInfo.base}</b>\n        <br/>version: ${artifactInfo.version}\n        <br/>tags: ${Array.from(artifactInfo.tags)}\n        <br/>stage: ${d.stage}\n        <br/>timestamp: ${d3.isoFormat(new Date(d.timestamp))}\n        `;\n  });\n  for (const value of series) {\n    const latest = value.reduce((total, currentValue, currentIndex, arr) => currentValue.timestamp > total.timestamp ? currentValue : total);\n    const latestColor = color(latest.stage);\n    const latestColorStroke = (d3.color(latestColor)?.darker(2) ?? latestColor).toString();\n    const serieG = svg.append(\"g\");\n    const line = d3.line().x((d) => x(d.timestamp)).y((d) => (y(d.stage) ?? 0) + y.bandwidth() / 2);\n    serieG.append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", latestColorStroke).attr(\"stroke-width\", 1.5).attr(\"d\", line(value));\n    serieG.selectAll(\"circle\").data(value).join(\"circle\").attr(\"cx\", (d) => x(d.timestamp)).attr(\"cy\", (d) => (y(d.stage) ?? 0) + y.bandwidth() / 2).attr(\"r\", 6).attr(\"fill\", latestColor).attr(\"stroke\", latestColorStroke).attr(\"stroke-width\", 1.5).on(\"mouseleave\", (e, d) => tooltip.hideOnMouseleave(e, d)).on(\"mouseover\", (e, d) => tooltip.showOnMouseover(e, d));\n  }\n}\n\ndraw(context);});\n",
        "content": "",
        "contentPartials": [],
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "auto",
          "language": "html"
        },
        "editors": [
          "afterRender"
        ],
        "externalStyles": [],
        "helpers": "",
        "renderMode": "data",
        "style": "",
        "wrap": false
      },
      "title": "$artifact_fnames",
      "repeat": "artifact_fnames",
      "maxPerRow": 2,
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${datasource}"
      },
      "targets": [
        {
          "format": "table",
          "rawSql": "SELECT timestamp,\n  predicate as action,\n  predicate as stage,\n  payload -> 'subject' ->> 'id' as artifact_id\nFROM cdevents_lake\nWHERE $__timeFilter(timestamp)\n  AND payload -> 'subject' ->> 'id' LIKE 'pkg:${artifact_fnames}@%'\n  AND subject = 'artifact'\n  AND predicate = ANY(ARRAY['published', 'signed'])\n\nUNION ALL\n\nSELECT timestamp,\n  predicate as action,\n  payload -> 'subject' -> 'content' -> 'environment' ->> 'id' || '/' || payload -> 'subject' ->> 'id' as stage,\n  payload -> 'subject' -> 'content' ->> 'artifactId' as artifact_id\nFROM cdevents_lake\nWHERE $__timeFilter(timestamp)\n  AND payload -> 'subject' -> 'content' ->> 'artifactId' LIKE 'pkg:${artifact_fnames}%'\n  AND subject = 'service'\n  AND predicate = ANY(ARRAY['deployed', 'upgraded', 'rolledback'])",
          "refId": "",
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "${datasource}"
          },
          "editorMode": "code",
          "rawQuery": true
        }
      ],
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 0,
        "y": 0
      }
    }
  ],
  "version": 2025051918
}
