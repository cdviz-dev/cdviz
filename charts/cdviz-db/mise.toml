[env]
NAME = "cdviz-db"
DEPENDS = "charts/cdviz-db/*"

[tasks."release_prepare"]
description = "Prepare release (calculate version & generate changelog)"
shell = "bash -c"
run = """
set -euo pipefail

# Calculate next version using git-cliff
VERSION=$(git cliff --config ../../cliff.toml \
  --include-path "$DEPENDS" \
  --bumped-version \
  --unreleased 2>/dev/null || echo "")

# If no version bump detected, exit
if [[ -z "$VERSION" ]]; then
  CURRENT=$(yq .version Chart.yaml)
  echo "No changes detected for $NAME, staying at $CURRENT"
  exit 0
fi

echo "Preparing $NAME: $VERSION"

# Update Chart.yaml
yq -i ".version = \\"$VERSION\\" | .appVersion = \\"$VERSION\\"" Chart.yaml

# Generate changelog
git cliff --config ../../cliff.toml \
  --include-path "$DEPENDS" \
  --tag "$VERSION" \
  -o CHANGELOG.md

echo "‚úÖ Prepared $NAME $VERSION"
"""

[tasks."release_publish"]
description = "Publish chart to OCI registry"
shell = "bash -c"
run = """
set -euo pipefail

VERSION=$(yq .version Chart.yaml)

# Check if already published
if helm show chart "$OCI_REGISTRY/$NAME" --version "$VERSION" &>/dev/null; then
  echo "‚è≠Ô∏è  $NAME $VERSION already published"
  exit 0
fi

echo "üì¶ Publishing $NAME $VERSION..."

# Package chart (no dependencies for this chart)
mkdir -p ../../build
helm package -d ../../build .

# Push to OCI registry
helm push "../../build/$NAME-$VERSION.tgz" "$OCI_REGISTRY"

# Create git tag
git tag "$NAME-$VERSION" -m "Release $NAME $VERSION"
git push origin "$NAME-$VERSION"

echo "‚úÖ Published $NAME $VERSION"
"""

[tasks.lint]
description = "Lint Helm chart"
run = [
  "helm lint .",
  "helm template . | kubectl apply --dry-run=client -f -"
]

[tasks.ci]
depends = [":lint"]
