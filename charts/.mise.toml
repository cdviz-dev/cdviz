[tools]
# local kubernetes (k8s)
# docker = "latest"     # to build, to run containers, should be available for some of thoses tools
# dive = "latest"       # to explore content of image container
helm = "3"         # to check helm chart
kubectl = "1.32.0" # to interact with k8s cluster

# TODO upgrade version only if change in the context of the Dockerfile
# TODO sign container (see <https://www.sigstore.dev/how-it-works>)
# TODO sign chart (see <https://www.sigstore.dev/how-it-works>)

[tasks."lint:cdviz-collector"]
run = [
    "helm lint cdviz-collector",
    "helm template ./cdviz-collector | kubectl apply --dry-run=client -f -",
]

[tasks."lint:cdviz-db"]
run = [
    "helm lint cdviz-db",
    "helm template ./cdviz-db | kubectl apply --dry-run=client -f -",
]

[tasks."lint:cdviz-grafana"]
run = [
    "helm lint cdviz-grafana",
    "helm template ./cdviz-grafana | kubectl apply --dry-run=client -f -",
]

[tasks."publish-module"]
hide = true
shell = 'bash -c'
run = """
set -euxo pipefail

MODULE={{option(name="module")}}
mkdir -p build || true

# get version from git descibe
# TODO? use a static version (like 0.0.0-dev) when not on exact tag to simplify the local build/test
# of the cdviz chart OR find a way to use "file://..." instead of "oci://..." on dev/test only
git fetch --tags --force # Retrieve annotated tags. THIS TRICK REALLY HELPS (on CI)
if [[ -d ../${MODULE} ]] ; then
    git describe --always "$(git log -n 1 --pretty=format:%h -- ../${MODULE})" > build/version-${MODULE}.txt
else
    git describe --always "$(git log -n 1 --pretty=format:%h -- ${MODULE})" > build/version-${MODULE}.txt
fi
VERSION=$(cat build/version-${MODULE}.txt)

# build container (for x86_64 and arm64) with version as tag & publish on ghcr.io
if [[ -f "../${MODULE}/Dockerfile" ]]; then
    docker buildx build \
        --output type=image,compression=zstd,oci-mediatypes=true \
        --platform linux/amd64,linux/arm64 \
        -t "ghcr.io/cdviz-dev/${MODULE}:${VERSION}" \
        --push \
        -f "../${MODULE}/Dockerfile" \
        "../${MODULE}"
fi


# build & publish chart as oci
# set version in Chart.yaml & values.yaml (using go-yq) not needed because the version of the image is set to appVersion, and the version (& appVersion) are set via cli during the package
helm package -d build "${MODULE}" --app-version "$VERSION" --version "$VERSION"
helm push "build/${MODULE}-${VERSION}.tgz" oci://ghcr.io/cdviz-dev/charts
"""

[tasks."publish:cdviz-collector"]
run = ["mise run publish-module --module cdviz-collector"]

[tasks."publish:cdviz-db"]
run = ["mise run publish-module --module cdviz-db"]

[tasks."publish:cdviz-grafana"]
run = ["mise run publish-module --module cdviz-grafana"]

[tasks."publish"]
description = "publish all charts & containers"
depends = ["publish:*"]

[tasks.ci]
description = "set of tasks run by CI"
depends = ["lint:*"]
