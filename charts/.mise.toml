[tools]
# local kubernetes (k8s)
# docker = "latest"     # to build, to run containers, should be available for some of thoses tools
# dive = "latest"       # to explore content of image container
helm = "3"         # to check helm chart
kubectl = "1.34.0" # to interact with k8s cluster
kind = "0.30.0"    # to run local k8s cluster for testing

# TODO upgrade version only if change in the context of the Dockerfile
# TODO sign container (see <https://www.sigstore.dev/how-it-works>)
# TODO sign chart (see <https://www.sigstore.dev/how-it-works>)

[tasks."lint:cdviz-collector"]
run = [
  "helm dependency update cdviz-collector",
  "helm lint cdviz-collector",
  "helm template ./cdviz-collector | kubectl apply --dry-run=client -f -",
]

[tasks."lint:cdviz-db"]
run = [
  "helm lint cdviz-db",
  "helm template ./cdviz-db | kubectl apply --dry-run=client -f -",
]

[tasks."lint:cdviz-grafana"]
run = [
  "helm lint cdviz-grafana",
  "helm template ./cdviz-grafana | kubectl apply --dry-run=client -f -",
]

[tasks."publish-module"]
hide = true
shell = 'bash -c'
run = """
set -euxo pipefail

MODULE={{option(name="module")}}
mkdir -p build || true

# get version from git descibe
# TODO? use a static version (like 0.0.0-dev) when not on exact tag to simplify the local build/test
# of the cdviz chart OR find a way to use "file://..." instead of "oci://..." on dev/test only
git fetch --tags --force # Retrieve annotated tags. THIS TRICK REALLY HELPS (on CI)

CHART_SRC_HASH=$(git log -n 1 --pretty=format:%h -- ${MODULE})
MODULE_SRC_HASH=$(git log -n 1 --pretty=format:%h -- ${MODULE})
if [[ -d ../${MODULE} ]] ; then
    MODULE_SRC_HASH=$(git log -n 1 --pretty=format:%h -- ../${MODULE})
fi
APP_VERSION=$(git describe --always "$MODULE_SRC_HASH")

VERSION=$(git describe --always "$CHART_SRC_HASH")
if ! git merge-base --is-ancestor "$MODULE_SRC_HASH" "$CHART_SRC_HASH" &>/dev/null ; then
    VERSION="$APP_VERSION"
fi

echo "$MODULE, VERSION: $VERSION, APP_VERSION: $APP_VERSION"

if ! helm show chart "oci://ghcr.io/cdviz-dev/charts/${MODULE}" --version "$VERSION" &> /dev/null ; then
  # build & publish chart as oci
  # set version in Chart.yaml & values.yaml (using go-yq) not needed because the version of the image is set to appVersion, and the version (& appVersion) are set via cli during the package
  helm dependency build "${MODULE}"
  helm package -d build "${MODULE}" --app-version "$APP_VERSION" --version "$VERSION"
  helm push "build/${MODULE}-${VERSION}.tgz" oci://ghcr.io/cdviz-dev/charts
fi
"""

[tasks."publish:cdviz-collector"]
run = ["mise run publish-module --module cdviz-collector"]

[tasks."publish:cdviz-db"]
run = ["mise run publish-module --module cdviz-db"]

[tasks."publish:cdviz-grafana"]
run = ["mise run publish-module --module cdviz-grafana"]

[tasks."publish"]
description = "publish all charts"
depends = ["publish:*"]

[tasks."test:cdviz-collector"]
description = "Test cdviz-collector helm chart in k8s cluster"
shell = 'bash -c'
wait_for = ["lint:*"]
run = """
set -euxo pipefail

CLUSTER_NAME="kind-cdviz-test-$$"
NAMESPACE="cdviz-collector-test"
RELEASE_NAME="cdviz-collector-test"

# Function to cleanup on exit
cleanup() {
  echo "Cleaning up cluster: $CLUSTER_NAME"
  kind delete cluster --name "$CLUSTER_NAME" || true
}
trap cleanup EXIT

# Create kind cluster
echo "Creating kind cluster: $CLUSTER_NAME"
kind create cluster --name "$CLUSTER_NAME" --wait 60s

# Create namespace
kubectl create namespace "$NAMESPACE"

# Update helm dependencies
helm dependency update cdviz-collector

# Deploy the chart
echo "Deploying cdviz-collector chart"
helm upgrade --install "$RELEASE_NAME" ./cdviz-collector \
  --namespace "$NAMESPACE" \
  --wait \
  --timeout 1m \
  --set kubewatch.enabled=true \
  --set "kubewatch.cloudevent.url=http://$RELEASE_NAME:8080/webhook/000-kubewatch"

# Wait for deployment to be ready
echo "Waiting for cdviz-collector to be ready"
kubectl wait --for=condition=ready pod \
  --selector=app.kubernetes.io/name=cdviz-collector \
  --namespace "$NAMESPACE" \
  --timeout=300s

# Check readiness probe endpoint
echo "Testing readiness endpoint"
kubectl port-forward "service/$RELEASE_NAME" 8080:8080 --namespace "$NAMESPACE" &
PORT_FORWARD_PID=$!
sleep 5

# Test the readiness endpoint
curl -f http://localhost:8080/readyz || {
  echo "Readiness check failed"
  kill $PORT_FORWARD_PID || true
  exit 1
}

# Test the health endpoint
curl -f http://localhost:8080/healthz || {
  echo "Health check failed"
  kill $PORT_FORWARD_PID || true
  exit 1
}

kill $PORT_FORWARD_PID || true

echo "âœ… cdviz-collector test completed successfully"
"""

[tasks.ci]
description = "set of tasks run by CI"
depends = ["lint:*", "test:cdviz-collector"]
