[tools]
# local kubernetes (k8s)
kubectl = "1.34.0" # to interact with k8s cluster
kind = "0.30.0"    # to run local k8s cluster for testing

[env]
NAME = "cdviz-collector"
DEPENDS = "charts/cdviz-collector/*"

[tasks."release_prepare"]
description = "Prepare release (calculate version & generate changelog)"
shell = "bash -c"
run = """
set -euo pipefail

# Calculate next version using git-cliff
VERSION=$(git cliff --config ../../cliff.toml \
  --include-path "$DEPENDS" \
  --bumped-version \
  --unreleased 2>/dev/null || echo "")

# If no version bump detected, exit
if [[ -z "$VERSION" ]]; then
  CURRENT=$(yq .version Chart.yaml)
  echo "No changes detected for $NAME, staying at $CURRENT"
  exit 0
fi

echo "Preparing $NAME: $VERSION"

# Update Chart.yaml
yq -i ".version = \\"$VERSION\\" | .appVersion = \\"$VERSION\\"" Chart.yaml

# Generate changelog
git cliff --config ../../cliff.toml \
  --include-path "$DEPENDS" \
  --tag "$VERSION" \
  -o CHANGELOG.md

echo "‚úÖ Prepared $NAME $VERSION"
"""

[tasks."release_publish"]
description = "Publish chart to OCI registry"
shell = "bash -c"
run = """
set -euo pipefail

VERSION=$(yq .version Chart.yaml)

# Check if already published
if helm show chart "$OCI_REGISTRY/$NAME" --version "$VERSION" &>/dev/null; then
  echo "‚è≠Ô∏è  $NAME $VERSION already published"
  exit 0
fi

echo "üì¶ Publishing $NAME $VERSION..."

# Build and package
helm dependency build .
mkdir -p ../../build
helm package -d ../../build .

# Push to OCI registry
helm push "../../build/$NAME-$VERSION.tgz" "$OCI_REGISTRY"

# Create git tag
git tag "$NAME-$VERSION" -m "Release $NAME $VERSION"
git push origin "$NAME-$VERSION"

echo "‚úÖ Published $NAME $VERSION"
"""

[tasks.lint]
description = "Lint Helm chart"
run = [
  "helm dependency update .",
  "helm lint .",
  "helm template . | kubectl apply --dry-run=client -f -"
]

[tasks.test]
description = "Test helm chart in k8s cluster"
shell = "bash -c"
wait_for = [":lint"]
run = """
set -euxo pipefail

CLUSTER_NAME="kind-cdviz-test-$$"
NAMESPACE="cdviz-collector-test"
RELEASE_NAME="cdviz-collector-test"

# Function to cleanup on exit
cleanup() {
  echo "Cleaning up cluster: $CLUSTER_NAME"
  kind delete cluster --name "$CLUSTER_NAME" || true
}
trap cleanup EXIT

# Create kind cluster
echo "Creating kind cluster: $CLUSTER_NAME"
kind create cluster --name "$CLUSTER_NAME" --wait 60s

# Create namespace
kubectl create namespace "$NAMESPACE"

# Update helm dependencies
helm dependency update cdviz-collector

# Deploy the chart
echo "Deploying cdviz-collector chart"
helm upgrade --install "$RELEASE_NAME" ./cdviz-collector \
  --namespace "$NAMESPACE" \
  --wait \
  --timeout 1m \
  --set kubewatch.enabled=true \
  --set "kubewatch.cloudevent.url=http://$RELEASE_NAME:8080/webhook/000-kubewatch"

# Wait for deployment to be ready
echo "Waiting for cdviz-collector to be ready"
kubectl wait --for=condition=ready pod \
  --selector=app.kubernetes.io/name=cdviz-collector \
  --namespace "$NAMESPACE" \
  --timeout=300s

# Check readiness probe endpoint
echo "Testing readiness endpoint"
kubectl port-forward "service/$RELEASE_NAME" 8080:8080 --namespace "$NAMESPACE" &
PORT_FORWARD_PID=$!
sleep 5

# Test the readiness endpoint
curl -f http://localhost:8080/readyz || {
  echo "Readiness check failed"
  kill $PORT_FORWARD_PID || true
  exit 1
}

# Test the health endpoint
curl -f http://localhost:8080/healthz || {
  echo "Health check failed"
  kill $PORT_FORWARD_PID || true
  exit 1
}

kill $PORT_FORWARD_PID || true

echo "‚úÖ cdviz-collector test completed successfully"
"""

[tasks.ci]
# depends = [":lint", ":test"]
depends = [":lint"]
